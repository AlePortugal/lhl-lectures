import React, { useState } from 'react';
import Item from '../Components/Item';

import { render, fireEvent } from '@testing-library/react';

describe( "items", () => {
  //xIt
  //test vs it ( same thing )

  it('The Component mounts', () => {
    // render returns an object with a bunch of functions that will let us query the DOM
    render(<Item item={'buy apples'} done={false}/>)
  })

  it('should have "buy apples" text', () => {
    // render returns an object with a bunch of functions that will let us query the DOM
    const { getByText } = render(<Item item={'buy apples'} done={false}/>)
    // should find the text "buy apples"
    expect( getByText('buy apples') )
  })

  it('should have be className "todo-item"', () => {
    // Container has alot of methods that gives us ways to traverse the Item DOM
    const { container } = render(<Item item={'buy apples'} done={false}/>)
    // our item should have a className todo-item which we can get out firstChild
    expect(container.firstChild.className).toBe('todo-item')
  })

  it('should have be className "todo-item"', () => {
    // Container has alot of methods that gives us ways to traverse the Item DOM
    const { container } = render(<Item item={'buy apples'} done={false}/>)
    // our item should have a className todo-item which we can get out firstChild
    expect(container.firstChild.className).toBe('todo-item')
  })

  it('It should be unchecked"', () => {
    // Container has alot of methods that gives us ways to traverse the Item DOM
    const { container } = render(<Item item={'buy apples'} done={false}/>)
    // our item should have a className todo-item which we can get out firstChild
    expect(container.firstChild.children[0].checked).toBe(false)
  })

  it('Clicked! Should be checked now', () => {
    // Do not do this!! this is to show how not to test props passing and changing
    //  but more of show you how to click an event
    let status = false;
    const { container } = render(<Item item={'buy apples'} done={status} toggleDone={() => status = true }/>)
    fireEvent.click(container.firstChild.children[0])
    console.log(container.firstChild.children[0].checked)
    expect(status).toBe(true)
  })


})